method = meth,
maxit = 20,
printFlag = FALSE    # <-- suppress iteration output
)
# Complete data after imputation
nhanes_imputed <- complete(imp, 1)
# confirm no missing data for predictors
sapply(nhanes_imputed, function(x) sum(is.na(x)))
# Apply helper function to lab values (numeric variables) to remove outliers and plot the data
numeric_vars <- c("LBXBPB", "LBXBCD", "LBXBMN", "BPXSY1", "BPXDI1")
nhanes_clean <- nhanes_imputed %>%
# Remove outliers -> "_clean" columns
mutate(across(all_of(numeric_vars), remove_outliers, .names = "{.col}_clean"))  %>%
# Drop rows with NA values introduced by outlier removal
drop_na()
# Save cleaned data
saveRDS(nhanes_clean, here::here("data/study2/nhanes_data.rds"))
# Read in the cleaned data
nhanes_clean <- readRDS(here::here("data/study2/nhanes_data_cleaned.rds"))
# Apply helper function to lab values (numeric variables) to remove outliers and plot the data
numeric_vars <- c("LBXBPB", "LBXBCD", "LBXBMN", "BPXSY1", "BPXDI1")
nhanes_clean <- nhanes_imputed %>%
# Remove outliers -> "_clean" columns
mutate(across(all_of(numeric_vars), remove_outliers, .names = "{.col}_clean"))  %>%
# Drop rows with NA values introduced by outlier removal
drop_na()
# Save cleaned data
saveRDS(nhanes_clean, here::here("data/study2/nhanes_data_cleaned.rds"))
# Read in the cleaned data
nhanes_clean <- readRDS(here::here("data/study2/nhanes_data_cleaned.rds"))
# Read in the cleaned data
nhanes_clean <- readRDS(here::here("data/study2/nhanes_data_cleaned.rds"))
library(labelled)
library(dataReporter)
# Assign variable labels
var_labels <- c(
SEQN = "Subject ID: Individual Identifier",
RIDAGEYR = "Age in years at screening (40-65)",
RIAGENDR = "Sex: male or female",
RIDRETH1 = "Race / Ethnicity",
LBXBPB = "Blood lead (µg/dL)",
LBXBPB_clean = "Blood lead after outlier removal",
LBXBCD = "Blood cadmium (µg/dL)",
LBXBCD_clean = "Blood cadmium after outlier removal",
LBXBMN = "Blood manganese (µg/dL)",
LBXBMN_clean = "Blood manganese after outlier removal",
BPXSY1 = "Systolic BP, first reading",
BPXSY1_clean = "Systolic BP, first reading after outlier removal",
BPXDI1 = "Diastolic BP, first reading",
BPXDI1_clean = "Diastolic BP, first reading after outlier removal"
)
# Convert your named character vector to a named list
var_labels_list <- as.list(var_labels)
# Apply labels to the dataframe
nhanes_clean <- set_variable_labels(nhanes_clean, .labels = var_labels_list)
suppressWarnings(makeCodebook(nhanes_clean, file = "my_data_report_study2.html", output = "html", replace = TRUE))
library(dplyr)
library(purrr)
library(tibble)
# Numeric variables codebook
numeric_codebook <- nhanes_clean %>%
select(where(is.numeric)) %>%
map_dfr(~{
tibble(
type = class(.x)[1],
missing = sum(is.na(.x)),
min = min(.x, na.rm = TRUE),
q25 = quantile(.x, 0.25, na.rm = TRUE),
median = median(.x, na.rm = TRUE),
mean = mean(.x, na.rm = TRUE),
q75 = quantile(.x, 0.75, na.rm = TRUE),
max = max(.x, na.rm = TRUE)
)
}, .id = "variable")
# Display results
print(numeric_codebook, n = Inf)
# Categorical variables codebook
categorical_codebook <- nhanes_clean %>%
select(where(~is.factor(.x) || is.character(.x))) %>%
map_dfr(~{
unique_vals <- unique(.x)
tibble(
type = class(.x)[1],
missing = sum(is.na(.x)),
n_unique = length(unique_vals),
levels = paste(head(unique_vals, 10), collapse = ", ") # show first 10
)
}, .id = "variable")
# Display results
print(categorical_codebook, n = Inf)
# categorical codebook -- easier to see
categorical_vars <- c("RIAGENDR", "RIDRETH1")
categorical_summary <- lapply(categorical_vars, function(var) {
nhanes_clean %>%
group_by(.data[[var]]) %>%
summarise(
count = n(),
.groups = "drop"
) %>%
mutate(
variable = var,
missing = sum(is.na(nhanes_clean[[var]]))
) %>%
select(variable, level = .data[[var]], count, missing)
}) %>%
bind_rows()
categorical_summary
head(nhanes_clean)
library(psych)
# numeric variables
describe(nhanes_clean)
# Categorical variables
library(dplyr)
library(tidyr)
# List of categorical variables to summarize
cat_vars <- c("RIAGENDR", "RIDRETH1")
# Function to summarize one categorical variable
summarize_cat <- function(var_name, data) {
data %>%
count(.data[[var_name]]) %>%
mutate(
Proportion = n / sum(n),
variable = var_name,
level = .data[[var_name]]
) %>%
select(variable, level, n, Proportion)
}
# Loop over variables and combine
cat_summary <- lapply(cat_vars, summarize_cat, data = nhanes_clean) %>%
bind_rows()
cat_summary
library(rsample)
set.seed(123)  # for reproducibility
# Create a split object
split <- initial_split(nhanes_clean, prop = 0.8)
# Extract training and testing datasets
train_data <- training(split)
test_data  <- testing(split)
# ----------- Demonstrate that each subject is in exactly one set
all_subjects <- nhanes_clean$SEQN
train_subjects <- train_data$SEQN
test_subjects  <- test_data$SEQN
# a) no overlap
intersect(train_subjects, test_subjects)  # should return integer(0)
# b) all subjects accounted for
setdiff(all_subjects, c(train_subjects, test_subjects))  # should return integer(0)
# Generate distribution plots
p_sbp <- visualize_data(nhanes_imputed, "BPXSY1", "Systolic BP")
p_sbp
# Linear regression predicting systolic BP from heavy metal concentration in blood
model <- lm(BPXSY1_clean ~ LBXBPB_clean + LBXBCD_clean + LBXBMN_clean + RIDAGEYR + RIAGENDR + RIDRETH1, data = train_data)
# Model fit statistics
model_stats <- glance(model) %>%
select(r.squared, adj.r.squared, AIC, BIC) %>%
mutate(across(where(is.numeric), round, 3))
# Summarize results
summary(model)
model_stats
library(ggplot2)
# Create a dataframe for plotting
resid_data <- data.frame(
Fitted = model$fitted.values,
Residuals = model$residuals
)
ggplot(resid_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.6) +                        # scatter points
geom_smooth(method = "loess", se = FALSE, color = "blue") + # LOESS smooth
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
theme_minimal() +
labs(title = "Residuals vs Fitted with LOESS",
x = "Fitted values",
y = "Residuals")
# Linear regression predicting systolic BP from heavy metal concentration in blood
model_small <- lm(BPXSY1_clean ~ LBXBPB_clean + LBXBCD_clean + LBXBMN_clean, data = train_data)
# Model fit statistics
model_stats_small <- glance(model_small) %>%
select(r.squared, adj.r.squared, AIC, BIC) %>%
mutate(across(where(is.numeric), round, 3))
# Summarize results
summary(model_small)
model_stats_small
# Create a dataframe for plotting
resid_data <- data.frame(
Fitted = model_small$fitted.values,
Residuals = model_small$residuals
)
ggplot(resid_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.6) +                        # scatter points
geom_smooth(method = "loess", se = FALSE, color = "blue") + # LOESS smooth
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
theme_minimal() +
labs(title = "Residuals vs Fitted with LOESS",
x = "Fitted values",
y = "Residuals")
source(here::here("R/helpers.R"))  # absolute path to R/
library(dplyr)
library(tidyverse)
library(patchwork)
# Read in the dataset (consisting of 3 NHANES merged datasets on lab values and blood pressure. This dataset only contains the variables of interest and has been filtered by the appropriate age range)
nhanes_filtered <- readRDS(here::here("data/nhanes_data.rds"))
# Explore where missing values occur on a heatmap of the data
library(naniar)
vis_miss(nhanes_filtered)
miss_var_summary(nhanes_filtered)
# create indicators
nhanes_filtered$lab_missing  <- as.integer(
is.na(nhanes_filtered$LBXBPB) | is.na(nhanes_filtered$LBXBCD) | is.na(nhanes_filtered$LBXBMN)
)
nhanes_filtered$bp_missing   <- as.integer(
is.na(nhanes_filtered$BPXSY1) | is.na(nhanes_filtered$BPXDI1)
)
# Contingency table
tab <- table(nhanes_filtered$lab_missing, nhanes_filtered$bp_missing)
tab
# Chi-squared test
chisq.test(tab)
# Effect size: Cramer's V (equivalent to phi coefficient for 2x2)
library(rcompanion)
cramerV(tab)
# logistic regression predicting missingness (binary outcome) on other covariates
model_lab <- glm(lab_missing ~ RIDAGEYR + RIAGENDR + RIDRETH1,
data = nhanes_filtered, family = binomial)
summary(model_lab)
model_bp  <- glm(bp_missing ~ RIDAGEYR + RIAGENDR + RIDRETH1,
data = nhanes_filtered, family = binomial)
summary(model_bp)
library(mice)
# Impute filtered dataset
# Define methods per variable
meth <- make.method(nhanes_filtered)
meth[c("LBXBPB", "LBXBCD", "LBXBMN")] <- "pmm"
meth["SEQN"] <- ""  # ID variable excluded
# Perform imputation
set.seed(123)
imp <- mice(
nhanes_filtered,
m = 1,       # single imputed dataset
method = meth,
maxit = 20,
printFlag = FALSE    # <-- suppress iteration output
)
# Complete data after imputation
nhanes_imputed <- complete(imp, 1)
# confirm no missing data for predictors
sapply(nhanes_imputed, function(x) sum(is.na(x)))
# Apply helper function to lab values (numeric variables) to remove outliers and plot the data
numeric_vars <- c("LBXBPB", "LBXBCD", "LBXBMN", "BPXSY1", "BPXDI1")
nhanes_clean <- nhanes_imputed %>%
# Remove outliers -> "_clean" columns
mutate(across(all_of(numeric_vars), remove_outliers, .names = "{.col}_clean"))  %>%
# Drop rows with NA values introduced by outlier removal
drop_na()
# Save cleaned data
saveRDS(nhanes_clean, here::here("data/study2/nhanes_data_cleaned.rds"))
# Read in the cleaned data
nhanes_clean <- readRDS(here::here("data/study2/nhanes_data_cleaned.rds"))
library(labelled)
library(dataReporter)
# Assign variable labels
var_labels <- c(
SEQN = "Subject ID: Individual Identifier",
RIDAGEYR = "Age in years at screening (40-65)",
RIAGENDR = "Sex: male or female",
RIDRETH1 = "Race / Ethnicity",
LBXBPB = "Blood lead (µg/dL)",
LBXBPB_clean = "Blood lead after outlier removal",
LBXBCD = "Blood cadmium (µg/dL)",
LBXBCD_clean = "Blood cadmium after outlier removal",
LBXBMN = "Blood manganese (µg/dL)",
LBXBMN_clean = "Blood manganese after outlier removal",
BPXSY1 = "Systolic BP, first reading",
BPXSY1_clean = "Systolic BP, first reading after outlier removal",
BPXDI1 = "Diastolic BP, first reading",
BPXDI1_clean = "Diastolic BP, first reading after outlier removal"
)
# Convert your named character vector to a named list
var_labels_list <- as.list(var_labels)
# Apply labels to the dataframe
nhanes_clean <- set_variable_labels(nhanes_clean, .labels = var_labels_list)
suppressWarnings(makeCodebook(nhanes_clean, file = "my_data_report_study2.html", output = "html", replace = TRUE))
library(dplyr)
library(purrr)
library(tibble)
# Numeric variables codebook
numeric_codebook <- nhanes_clean %>%
select(where(is.numeric)) %>%
map_dfr(~{
tibble(
type = class(.x)[1],
missing = sum(is.na(.x)),
min = min(.x, na.rm = TRUE),
q25 = quantile(.x, 0.25, na.rm = TRUE),
median = median(.x, na.rm = TRUE),
mean = mean(.x, na.rm = TRUE),
q75 = quantile(.x, 0.75, na.rm = TRUE),
max = max(.x, na.rm = TRUE)
)
}, .id = "variable")
# Display results
print(numeric_codebook, n = Inf)
# Categorical variables codebook
categorical_codebook <- nhanes_clean %>%
select(where(~is.factor(.x) || is.character(.x))) %>%
map_dfr(~{
unique_vals <- unique(.x)
tibble(
type = class(.x)[1],
missing = sum(is.na(.x)),
n_unique = length(unique_vals),
levels = paste(head(unique_vals, 10), collapse = ", ") # show first 10
)
}, .id = "variable")
# Display results
print(categorical_codebook, n = Inf)
# categorical codebook -- easier to see
categorical_vars <- c("RIAGENDR", "RIDRETH1")
categorical_summary <- lapply(categorical_vars, function(var) {
nhanes_clean %>%
group_by(.data[[var]]) %>%
summarise(
count = n(),
.groups = "drop"
) %>%
mutate(
variable = var,
missing = sum(is.na(nhanes_clean[[var]]))
) %>%
select(variable, level = .data[[var]], count, missing)
}) %>%
bind_rows()
categorical_summary
head(nhanes_clean)
library(psych)
# numeric variables
describe(nhanes_clean)
# Categorical variables
library(dplyr)
library(tidyr)
# List of categorical variables to summarize
cat_vars <- c("RIAGENDR", "RIDRETH1")
# Function to summarize one categorical variable
summarize_cat <- function(var_name, data) {
data %>%
count(.data[[var_name]]) %>%
mutate(
Proportion = n / sum(n),
variable = var_name,
level = .data[[var_name]]
) %>%
select(variable, level, n, Proportion)
}
# Loop over variables and combine
cat_summary <- lapply(cat_vars, summarize_cat, data = nhanes_clean) %>%
bind_rows()
cat_summary
library(rsample)
set.seed(123)  # for reproducibility
# Create a split object
split <- initial_split(nhanes_clean, prop = 0.8)
# Extract training and testing datasets
train_data <- training(split)
test_data  <- testing(split)
# ----------- Demonstrate that each subject is in exactly one set
all_subjects <- nhanes_clean$SEQN
train_subjects <- train_data$SEQN
test_subjects  <- test_data$SEQN
# a) no overlap
intersect(train_subjects, test_subjects)  # should return integer(0)
# b) all subjects accounted for
setdiff(all_subjects, c(train_subjects, test_subjects))  # should return integer(0)
# Generate distribution plots
p_sbp <- visualize_data(nhanes_imputed, "BPXSY1", "Systolic BP")
p_sbp
# Linear regression predicting systolic BP from heavy metal concentration in blood
model <- lm(BPXSY1_clean ~ LBXBPB_clean + LBXBCD_clean + LBXBMN_clean + RIDAGEYR + RIAGENDR + RIDRETH1, data = train_data)
# Model fit statistics
model_stats <- glance(model) %>%
select(r.squared, adj.r.squared, AIC, BIC) %>%
mutate(across(where(is.numeric), round, 3))
# Summarize results
summary(model)
model_stats
library(ggplot2)
# Create a dataframe for plotting
resid_data <- data.frame(
Fitted = model$fitted.values,
Residuals = model$residuals
)
ggplot(resid_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.6) +                        # scatter points
geom_smooth(method = "loess", se = FALSE, color = "blue") + # LOESS smooth
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
theme_minimal() +
labs(title = "Residuals vs Fitted with LOESS",
x = "Fitted values",
y = "Residuals")
# Linear regression predicting systolic BP from heavy metal concentration in blood
model_small <- lm(BPXSY1_clean ~ LBXBPB_clean + LBXBCD_clean + LBXBMN_clean, data = train_data)
# Model fit statistics
model_stats_small <- glance(model_small) %>%
select(r.squared, adj.r.squared, AIC, BIC) %>%
mutate(across(where(is.numeric), round, 3))
# Summarize results
summary(model_small)
model_stats_small
# Create a dataframe for plotting
resid_data <- data.frame(
Fitted = model_small$fitted.values,
Residuals = model_small$residuals
)
ggplot(resid_data, aes(x = Fitted, y = Residuals)) +
geom_point(alpha = 0.6) +                        # scatter points
geom_smooth(method = "loess", se = FALSE, color = "blue") + # LOESS smooth
geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
theme_minimal() +
labs(title = "Residuals vs Fitted with LOESS",
x = "Fitted values",
y = "Residuals")
# Chunk 1: load-packages
#| label: load-packages
#| message: false
library(janitor)
library(naniar)
library(knitr)
library(easystats)
library(magrittr)
library(Hmisc)
library(scales)
library(tidyverse)
library(DT)
library(gt)
theme_set(theme_minimal(base_size = 24, base_family = "sans"))
# Chunk 2: load-data
#| label: load-data
#| message: false
nhanes_data <- readRDS("data/nhanes_cleaned.Rds")
# Chunk 1: load-packages
#| label: load-packages
#| message: false
library(janitor)
library(naniar)
library(knitr)
library(easystats)
library(magrittr)
library(Hmisc)
library(scales)
library(tidyverse)
library(DT)
library(gt)
theme_set(theme_minimal(base_size = 24, base_family = "sans"))
# Chunk 2: load-data
#| label: load-data
#| message: false
nhanes_data <- readRDS("data/nhanes_cleaned.Rds")
# Chunk 1: load-packages
#| label: load-packages
#| message: false
library(janitor)
library(naniar)
library(knitr)
library(easystats)
library(magrittr)
library(Hmisc)
library(scales)
library(tidyverse)
library(DT)
library(gt)
theme_set(theme_minimal(base_size = 24, base_family = "sans"))
# Chunk 2: load-data
#| label: load-data
#| message: false
# read in the data
nhanes_data <- readRDS(here::here("data/study1/nhanes_data_cleaned.Rds"))  # absolute path to data/
# import helper functions
source(here::here("R/helpers.R"))  # absolute path to R/
View(nhanes_data)
# overall prevalence calculations
# Binarize systolic BP into high (>140) and normal/low (<= 140)
nhanes_data <- nhanes_data %>%
mutate(
HighBP = ifelse(BPXSY1_clean > 140, "Yes", "No")
)
View(nhanes_data)
highBP_prevalence <- nhanes_data %>%
summarise(prevalence = mean(HighBP == "Yes", na.rm = TRUE))
View(highBP_prevalence)
#| label: load-data
#| message: false
#--------------- Import Data ---------------------
# read in the data
nhanes_data <- readRDS(here::here("data/study1/nhanes_data_cleaned.Rds"))  # absolute path to data/
# import helper functions
source(here::here("R/helpers.R"))  # absolute path to R/
#--------------- Data Preprocessing ---------------------
# Binarize systolic BP into high (>140) and normal/low (<= 140)
nhanes_data <- nhanes_data %>%
mutate(
HighBP = ifelse(BPXSY1 > 140, 1, 0)  #use original data, prior to outlier removal
)
# Bin Age into 5-year Bins
nhanes_data <- nhanes_data %>%
mutate(
age_group = cut(
RIDAGEYR,
breaks = c(40, 44, 49, 54, 59, 65),   # define the bin edges
labels = c("40-44", "45-49", "50-54", "55-59", "60-65"),  # labels for bins
include.lowest = TRUE,   # include 40 in the first bin
right = TRUE             # intervals are closed on the right (default)
)
)
View(nhanes_data)
nhanes_data$BPXSY1
