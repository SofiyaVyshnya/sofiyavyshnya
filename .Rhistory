"Other/Multiracial" = "Other Race - Including Multi-Racial")
)
# Save cleaned data too
saveRDS(nhanes_clean, "data/nhanes_cleaned.rds")
library(ggplot2)
library(patchwork)  # install.packages("patchwork") if needed
# --- Remove outliers ---
Q1 <- quantile(nhanes_clean$LBXBPB, 0.25, na.rm = TRUE)
Q3 <- quantile(nhanes_clean$LBXBPB, 0.75, na.rm = TRUE)
IQR_val <- IQR(nhanes_clean$LBXBPB, na.rm = TRUE)
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# --- Log transform ---
# (use log1p if your data contains zeros)
LBXBPB_log <- log(LBXBPB_clean)
# --- Create plots ---
p1 <- ggplot(data.frame(LBXBPB_clean), aes(x = LBXBPB_clean)) +
geom_histogram(binwidth = diff(range(LBXBPB_clean))/30,
fill = "skyblue", color = "white") +
labs(title = "LBXBPB (Outliers Removed)", x = "LBXBPB", y = "Count") +
theme_minimal()
p2 <- ggplot(data.frame(LBXBPB_log), aes(x = LBXBPB_log)) +
geom_histogram(binwidth = diff(range(LBXBPB_log))/30,
fill = "tomato", color = "white") +
labs(title = "log(LBXBPB) (Outliers Removed)", x = "log(LBXBPB)", y = "Count") +
theme_minimal()
# --- Combine side by side ---
p1 + p2
library(ggplot2)
library(patchwork)  # install.packages("patchwork") if needed
# Standard scale LBXBPB
LBXBMN_scaled <- as.numeric(scale(nhanes_clean$LBXBMN))
# --- Remove outliers ---
# --- Compute mean and SD ---
mean_val <- mean(LBXBMN_scaled, na.rm = TRUE)
sd_val   <- sd(LBXBMN_scaled, na.rm = TRUE)
lower_bound <- mean_val - 2.5 * sd_val
upper_bound <- mean_val + 2.5 * sd_val
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# --- Log transform ---
# (use log1p if your data contains zeros)
LBXBPB_log <- log(LBXBPB_clean)
# --- Create plots ---
p1 <- ggplot(data.frame(LBXBPB_clean), aes(x = LBXBPB_clean)) +
geom_histogram(binwidth = diff(range(LBXBPB_clean))/30,
fill = "skyblue", color = "white") +
labs(title = "LBXBPB (Outliers Removed)", x = "LBXBPB", y = "Count") +
theme_minimal()
p2 <- ggplot(data.frame(LBXBPB_log), aes(x = LBXBPB_log)) +
geom_histogram(binwidth = diff(range(LBXBPB_log))/30,
fill = "tomato", color = "white") +
labs(title = "log(LBXBPB) (Outliers Removed)", x = "log(LBXBPB)", y = "Count") +
theme_minimal()
# --- Combine side by side ---
p1 + p2
numeric_vars <- c("RIDAGEYR", "LBXBPB", "LBXBCD", "LBXBMN", "BPXSY1", "BPXDI1")
numeric_summary <- nhanes_clean %>%
select(all_of(numeric_vars)) %>%
summarise(across(
everything(),
list(
mean = mean,
sd = sd,
median = median,
min = min,
max = max
)
)) %>%
pivot_longer(
cols = everything(),
names_to = c("Variable", "Statistic"),
names_sep = "_",
values_to = "Value"
) %>%
pivot_wider(
names_from = Statistic,
values_from = Value
)
numeric_summary
# Categorical summary
library(dplyr)
library(tidyr)
# List of categorical variables to summarize
cat_vars <- c("RIAGENDR", "RIDRETH1")
# Function to summarize one categorical variable
summarize_cat <- function(var_name, data) {
data %>%
count(.data[[var_name]]) %>%
mutate(
Proportion = n / sum(n),
variable = var_name,
level = .data[[var_name]]
) %>%
select(variable, level, n, Proportion)
}
# Loop over variables and combine
cat_summary <- lapply(cat_vars, summarize_cat, data = nhanes_clean) %>%
bind_rows()
cat_summary
library(dplyr)
library(rstatix)
library(tidyr)
# List of numeric variables to summarize
numeric_vars <- c("LBXBPB", "LBXBCD", "LBXBMN", "BPXSY1", "BPXDI1")
# List of numeric variables
numeric_vars <- c("LBXBPB", "LBXBCD", "LBXBMN", "BPXSY1", "BPXDI1")
# Function to summarize one variable
summarize_var_one_row <- function(var_name, data) {
# Compute median ± IQR by gender
summary_tbl <- data %>%
group_by(RIAGENDR) %>%
summarise(
n = n(),
median = median(.data[[var_name]], na.rm = TRUE),
IQR = IQR(.data[[var_name]], na.rm = TRUE),
.groups = "drop"
) %>%
mutate(`Median ± IQR` = paste0(median, " ± ", IQR)) %>%
select(RIAGENDR, n, `Median ± IQR`)
# Mann-Whitney test
mw_test <- wilcox_test(data, formula = as.formula(paste(var_name, "~ RIAGENDR")))
# Effect size (r)
group_sizes <- data %>%
group_by(RIAGENDR) %>%
summarise(n = sum(!is.na(.data[[var_name]]))) %>%
pull(n)
n1 <- group_sizes[1]
n2 <- group_sizes[2]
W <- mw_test$statistic
mu_W <- n1 * n2 / 2
sigma_W <- sqrt(n1 * n2 * (n1 + n2 + 1) / 12)
Z <- (W - mu_W) / sigma_W
N <- sum(!is.na(data[[var_name]]))
r <- Z / sqrt(N)
# Pivot summary to have one row per variable
summary_wide <- summary_tbl %>%
pivot_wider(
names_from = RIAGENDR,
values_from = c(n, `Median ± IQR`),
names_sep = "_"
) %>%
mutate(
variable = var_name,
p_value = round(mw_test$p, 3),
significant = ifelse(p_value < 0.05, "Yes", "No"),
effect_size_r = round(r, 3)
) %>%
select(variable, n_Male, `Median ± IQR_Male`, n_Female, `Median ± IQR_Female`,
p_value, significant, effect_size_r)
return(summary_wide)
}
# Apply function to all numeric variables
all_summaries <- lapply(numeric_vars, summarize_var_one_row, data = nhanes_clean) %>%
bind_rows()
# Display as tibble
all_summaries
library(ggplot2)
# Compute mean and SD of LBXBPB
mean_lead <- mean(nhanes_clean$LBXBPB, na.rm = TRUE)
sd_lead   <- sd(nhanes_clean$LBXBPB, na.rm = TRUE)
# Plot histogram
ggplot(nhanes_clean, aes(x = LBXBPB)) +
geom_histogram(aes(y = ..density..),  # density scale for overlay
binwidth = 0.5,       # adjust as needed
color = "black", fill = "lightblue") +
stat_function(fun = dnorm,
args = list(mean = mean_lead, sd = sd_lead),
color = "red", size = 1) +
labs(
title = "Histogram of Blood Lead Levels with Normal Density",
x = "Blood Lead Level (µg/dL)",
y = "Density"
) +
theme_minimal()
nhanes_clean %>%
group_by(RIDRETH1) %>%
summarise(
total = n(),
non_missing_LBXBPB = sum(!is.na(LBXBPB))
)
library(dplyr)
library(tidyr)
library(rstatix)
library(dplyr)
library(rstatix)
# Perform Kruskal-Wallis test
kruskal_test_result <- nhanes_clean %>%
kruskal_test(LBXBPB ~ RIDRETH1)
# View the Kruskal-Wallis test result
kruskal_test_result
# Perform Dunn's test for pairwise comparisons
dunn_test_result <- nhanes_clean %>%
dunn_test(LBXBPB ~ RIDRETH1, p.adjust.method = "bonferroni")
# View the Dunn's test results
dunn_test_result
# Calculate effect size (eta-squared)
eta_squared <- kruskal_test_result$statistic / (nrow(nhanes_clean) - 1)
# Display the effect size
eta_squared
library(ggplot2)
library(patchwork)
library(dplyr)
# --- Helper function ---
make_clean_plots <- function(data, var, var_label = var) {
# Remove outliers with IQR rule
Q1 <- quantile(data[[var]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[var]], 0.75, na.rm = TRUE)
IQR_val <- IQR(data[[var]], na.rm = TRUE)
lower <- Q1 - 1.5 * IQR_val
upper <- Q3 + 1.5 * IQR_val
clean_vals <- data[[var]][data[[var]] >= lower & data[[var]] <= upper]
# Log transform (use log1p if data has zeros)
log_vals <- log(clean_vals)
# Histograms
p_raw <- ggplot(data.frame(x = clean_vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(clean_vals))/30,
fill = "skyblue", color = "white") +
labs(title = paste(var_label, "(Outliers Removed)"),
x = var_label, y = "Count") +
theme_minimal()
p_log <- ggplot(data.frame(x = log_vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(log_vals))/30,
fill = "tomato", color = "white") +
labs(title = paste("log(", var_label, ") (Outliers Removed)"),
x = paste0("log(", var_label, ")"), y = "Count") +
theme_minimal()
return(p_raw + p_log) # side by side pair
}
# --- Apply to each variable ---
p_lead     <- make_clean_plots(nhanes_clean, "LBXBPB", "Blood Lead")
p_cadmium  <- make_clean_plots(nhanes_clean, "LBXBCD", "Blood Cadmium")
p_manganese<- make_clean_plots(nhanes_clean, "LBXBMN", "Blood Manganese")
# --- Stack them into 3x2 layout ---
final_plot <- (p_lead / p_cadmium / p_manganese)
final_plot
library(ggplot2)
library(patchwork)
library(dplyr)
# --- Helper function ---
make_three_plots <- function(data, var, var_label = var) {
vals <- data[[var]]
# --- Outlier removal using IQR rule ---
Q1 <- quantile(vals, 0.25, na.rm = TRUE)
Q3 <- quantile(vals, 0.75, na.rm = TRUE)
IQR_val <- IQR(vals, na.rm = TRUE)
lower <- Q1 - 1.5 * IQR_val
upper <- Q3 + 1.5 * IQR_val
clean_vals <- vals[vals >= lower & vals <= upper]
# --- Log transform ---
log_vals <- log(clean_vals)  # use log1p if zeros possible
# --- Plots ---
p_all <- ggplot(data.frame(x = vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(vals, na.rm=TRUE))/30,
fill = "gray70", color = "white") +
labs(title = paste(var_label, "(All Data)"),
x = var_label, y = "Count") +
theme_minimal()
p_clean <- ggplot(data.frame(x = clean_vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(clean_vals))/30,
fill = "skyblue", color = "white") +
labs(title = paste(var_label, "(Outliers Removed)"),
x = var_label, y = "Count") +
theme_minimal()
p_log <- ggplot(data.frame(x = log_vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(log_vals))/30,
fill = "tomato", color = "white") +
labs(title = paste("log(", var_label, ") (Outliers Removed)"),
x = paste0("log(", var_label, ")"), y = "Count") +
theme_minimal()
return(p_all + p_clean + p_log) # 3-column row
}
# --- Apply to each variable ---
p_lead      <- make_three_plots(nhanes_clean, "LBXBPB", "Blood Lead")
p_cadmium   <- make_three_plots(nhanes_clean, "LBXBCD", "Blood Cadmium")
p_manganese <- make_three_plots(nhanes_clean, "LBXBMN", "Blood Manganese")
# --- Stack into 3x3 grid ---
final_plot <- (p_lead / p_cadmium / p_manganese)
final_plot
library(ggplot2)
library(patchwork)
library(dplyr)
library(stringr)  # for str_wrap
make_three_plots <- function(data, var, var_label = var) {
vals <- data[[var]]
# Outlier removal (IQR rule)
Q1 <- quantile(vals, 0.25, na.rm = TRUE)
Q3 <- quantile(vals, 0.75, na.rm = TRUE)
IQR_val <- IQR(vals, na.rm = TRUE)
lower <- Q1 - 1.5 * IQR_val
upper <- Q3 + 1.5 * IQR_val
clean_vals <- vals[vals >= lower & vals <= upper]
log_vals <- log(clean_vals)  # use log1p if zeros possible
# Plots
p_all <- ggplot(data.frame(x = vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(vals, na.rm=TRUE))/30,
fill = "gray70", color = "white") +
labs(title = str_wrap(paste(var_label, "(All Data)"), width = 25),
x = var_label, y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size = 10))
p_clean <- ggplot(data.frame(x = clean_vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(clean_vals))/30,
fill = "skyblue", color = "white") +
labs(title = str_wrap(paste(var_label, "(Outliers Removed)"), width = 25),
x = var_label, y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size = 10))
p_log <- ggplot(data.frame(x = log_vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(log_vals))/30,
fill = "tomato", color = "white") +
labs(title = str_wrap(paste("log(", var_label, ") (Outliers Removed)"), width = 25),
x = paste0("log(", var_label, ")"), y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size = 10))
return(p_all + p_clean + p_log) # 3-column row
}
library(ggplot2)
library(patchwork)
library(dplyr)
library(stringr)  # for str_wrap
make_three_plots <- function(data, var, var_label = var) {
vals <- data[[var]]
# Outlier removal (IQR rule)
Q1 <- quantile(vals, 0.25, na.rm = TRUE)
Q3 <- quantile(vals, 0.75, na.rm = TRUE)
IQR_val <- IQR(vals, na.rm = TRUE)
lower <- Q1 - 1.5 * IQR_val
upper <- Q3 + 1.5 * IQR_val
clean_vals <- vals[vals >= lower & vals <= upper]
log_vals <- log(clean_vals)  # use log1p if zeros possible
# Plots
p_all <- ggplot(data.frame(x = vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(vals, na.rm=TRUE))/30,
fill = "gray70", color = "white") +
labs(title = str_wrap(paste(var_label, "(All Data)"), width = 25),
x = var_label, y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size = 10))
p_clean <- ggplot(data.frame(x = clean_vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(clean_vals))/30,
fill = "skyblue", color = "white") +
labs(title = str_wrap(paste(var_label, "(Outliers Removed)"), width = 25),
x = var_label, y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size = 10))
p_log <- ggplot(data.frame(x = log_vals), aes(x = x)) +
geom_histogram(binwidth = diff(range(log_vals))/30,
fill = "tomato", color = "white") +
labs(title = str_wrap(paste("log(", var_label, ") (Outliers Removed)"), width = 25),
x = paste0("log(", var_label, ")"), y = "Count") +
theme_minimal() +
theme(plot.title = element_text(size = 10))
return(p_all + p_clean + p_log) # 3-column row
}
# --- Apply to each variable ---
p_lead      <- make_three_plots(nhanes_clean, "LBXBPB", "Blood Lead")
p_cadmium   <- make_three_plots(nhanes_clean, "LBXBCD", "Blood Cadmium")
p_manganese <- make_three_plots(nhanes_clean, "LBXBMN", "Blood Manganese")
# --- Stack into 3x3 grid ---
final_plot <- (p_lead / p_cadmium / p_manganese)
final_plot
library(dplyr)
library(purrr)
# Function to generate codebook entry for each variable
make_codebook_entry <- function(x) {
var_type <- class(x)[1]
n_missing <- sum(is.na(x))
if (is.numeric(x)) {
stats <- summary(x)
details <- paste0(
"Min: ", stats["Min."],
", 25%: ", stats["1st Qu."],
", Median: ", stats["Median"],
", Mean: ", round(stats["Mean"], 2),
", 75%: ", stats["3rd Qu."],
", Max: ", stats["Max."]
)
} else if (is.factor(x) || is.character(x)) {
unique_vals <- unique(x)
n_unique <- length(unique_vals)
sample_vals <- paste(head(unique_vals, 5), collapse = ", ")
details <- paste0("Unique values: ", n_unique,
"; Examples: ", sample_vals)
} else {
details <- "Unsupported type"
}
tibble(
type = var_type,
missing = n_missing,
details = details
)
}
# Generate codebook for all variables
codebook <- map_dfr(nhanes_clean, make_codebook_entry, .id = "variable")
# Show nicely
print(codebook, n = Inf)
makeCodebook(nhanes_clean)
install.packages("dataMaid")
library(dataMaid)
makeCodebook(nhanes_clean)
install.packages("codebookr")
install.packages("flextable")
install.packages("flextable")
install.packages("officer")
install.packages("dataReporter")
library(dataReporter)
makeCodebook(nhanes_clean, file = "my_data_report.html", output = "html")
library(dplyr)
library(purrr)
library(tibble)
# Numeric variables codebook
numeric_codebook <- nhanes_clean %>%
select(where(is.numeric)) %>%
map_dfr(~{
tibble(
type = class(.x)[1],
missing = sum(is.na(.x)),
min = min(.x, na.rm = TRUE),
q25 = quantile(.x, 0.25, na.rm = TRUE),
median = median(.x, na.rm = TRUE),
mean = mean(.x, na.rm = TRUE),
q75 = quantile(.x, 0.75, na.rm = TRUE),
max = max(.x, na.rm = TRUE)
)
}, .id = "variable")
# Categorical variables codebook
categorical_codebook <- nhanes_clean %>%
select(where(~is.factor(.x) || is.character(.x))) %>%
map_dfr(~{
unique_vals <- unique(.x)
tibble(
type = class(.x)[1],
missing = sum(is.na(.x)),
n_unique = length(unique_vals),
levels = paste(head(unique_vals, 10), collapse = ", ") # show first 10
)
}, .id = "variable")
# Display results
cat("Numeric Variables Codebook:\n")
print(numeric_codebook, n = Inf)
cat("\nCategorical Variables Codebook:\n")
print(categorical_codebook, n = Inf)
library(nhanesA)
library(dplyr)
library(tidyverse)
# Download three datasets
demo  <- nhanes("DEMO_J")   # demographics
pbcd  <- nhanes("PBCD_J")   # heavy metals (lead, cadmium, manganese) in blood
bpx   <- nhanes("BPX_J")    # blood pressure
# Merge them
nhanes_data <- Reduce(function(x, y) merge(x, y, by = "SEQN", all = TRUE),
list(demo, pbcd, bpx))
# Save to RDS for later use
saveRDS(nhanes_data, "data/nhanes_combined.rds")
# Pull out only variables of interest
nhanes_subset <- nhanes_data %>%
select(
SEQN,       # participant ID
RIDAGEYR,   # age
RIAGENDR,   # gender
RIDRETH1,   # race
LBXBPB,     # blood lead
LBXBCD,     # blood cadmium
LBXBMN,     # blood manganese
BPXSY1,     # systolic BP
BPXDI1,     # diastolic BP
WTMEC2YR,   # MEC exam weight
SDMVPSU,    # PSU
SDMVSTRA    # Strata
)
library(dataReporter)
makeCodebook(nhanes_clean, file = "my_data_report.html", output = "html")
library(nhanesA)
library(dplyr)
library(tidyverse)
# Download three datasets
demo  <- nhanes("DEMO_J")   # demographics
pbcd  <- nhanes("PBCD_J")   # heavy metals (lead, cadmium, manganese) in blood
bpx   <- nhanes("BPX_J")    # blood pressure
# Merge them
nhanes_data <- Reduce(function(x, y) merge(x, y, by = "SEQN", all = TRUE),
list(demo, pbcd, bpx))
# Save to RDS for later use
saveRDS(nhanes_data, "data/nhanes_combined.rds")
# Pull out only variables of interest
nhanes_subset <- nhanes_data %>%
select(
SEQN,       # participant ID
RIDAGEYR,   # age
RIAGENDR,   # gender
RIDRETH1,   # race
LBXBPB,     # blood lead
LBXBCD,     # blood cadmium
LBXBMN,     # blood manganese
BPXSY1,     # systolic BP
BPXDI1,     # diastolic BP
WTMEC2YR,   # MEC exam weight
SDMVPSU,    # PSU
SDMVSTRA    # Strata
)
library(dataReporter)
makeCodebook(nhanes_clean, file = "my_data_report.html", output = "html")
library(dataReporter)
makeCodebook(nhanes_clean, file = "my_data_report.html", output = "html", replace = TRUE)
library(dataReporter)
suppressWarnings(makeCodebook(nhanes_clean, file = "my_data_report.html", output = "html", replace = TRUE))
View(nhanes_clean)
