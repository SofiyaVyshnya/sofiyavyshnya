library(nhanesA)
library(dplyr)
library(tidyverse)
# Download three datasets
demo  <- nhanes("DEMO_J")   # demographics
pbcd  <- nhanes("PBCD_J")   # heavy metals (lead, cadmium, manganese) in blood
bpx   <- nhanes("BPX_J")    # blood pressure
# Merge them
nhanes_data <- Reduce(function(x, y) merge(x, y, by = "SEQN", all = TRUE),
list(demo, pbcd, bpx))
# Save to RDS for later use
saveRDS(nhanes_data, "data/nhanes_combined.rds")
# Pull out only variables of interest
nhanes_subset <- nhanes_data %>%
select(
SEQN,       # participant ID
RIDAGEYR,   # age
RIAGENDR,   # gender
RIDRETH1,   # race
LBXBPB,     # blood lead
LBXBCD,     # blood cadmium
LBXBMN,     # blood manganese
BPXSY1,     # systolic BP
BPXDI1,     # diastolic BP
WTMEC2YR,   # MEC exam weight
SDMVPSU,    # PSU
SDMVSTRA    # Strata
)
# Filter for participants 18â€“65 years old
nhanes_filtered <- nhanes_subset %>%
filter(RIDAGEYR >= 40, RIDAGEYR <= 65)
# Make sure individuals included have complete data across all variables
nhanes_clean <- nhanes_filtered %>%
drop_na()%>%
# Re-name "Other Race - Including Multi-Racial" category in RIDRETH1 to Exclude Prohibited Characters
mutate(
RIDRETH1 = fct_recode(RIDRETH1,
"Other/Multiracial" = "Other Race - Including Multi-Racial")
)
# Save cleaned data too
saveRDS(nhanes_clean, "data/nhanes_cleaned.rds")
View(nhanes_clean)
nhanes_clean$LBXBPB
# Compute IQR bounds
Q1 <- quantile(nhanes_clean$LBXBPB, 0.25, na.rm = TRUE)
Q3 <- quantile(nhanes_clean$LBXBPB, 0.75, na.rm = TRUE)
IQR_val <- IQR(nhanes_clean$LBXBPB, na.rm = TRUE)
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
# Remove outliers
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# Plot histogram of raw cleaned data
hist(LBXBPB_clean,
main = "Histogram of LBXBPB (Outliers Removed)",
xlab = "LBXBPB",
col = "skyblue", border = "white")
# Apply log normalization (log-transform)
LBXBPB_log <- log(LBXBPB_clean)
# Plot histogram of log-transformed data
hist(LBXBPB_log,
main = "Histogram of log(LBXBPB) (Outliers Removed)",
xlab = "log(LBXBPB)",
col = "tomato", border = "white")
# Compute IQR bounds
Q1 <- quantile(nhanes_clean$LBXBCD, 0.25, na.rm = TRUE)
Q3 <- quantile(nhanes_clean$LBXBCD, 0.75, na.rm = TRUE)
IQR_val <- IQR(nhanes_clean$LBXBCD, na.rm = TRUE)
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
# Remove outliers
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# Plot histogram of raw cleaned data
hist(LBXBPB_clean,
main = "Histogram of LBXBPB (Outliers Removed)",
xlab = "LBXBPB",
col = "skyblue", border = "white")
# Apply log normalization (log-transform)
LBXBPB_log <- log(LBXBPB_clean)
# Plot histogram of log-transformed data
hist(LBXBPB_log,
main = "Histogram of log(LBXBPB) (Outliers Removed)",
xlab = "log(LBXBPB)",
col = "tomato", border = "white")
# Compute IQR bounds
Q1 <- quantile(nhanes_clean$LBXBCD, 0.25, na.rm = TRUE)
Q3 <- quantile(nhanes_clean$LBXBCD, 0.75, na.rm = TRUE)
IQR_val <- IQR(nhanes_clean$LBXBCD, na.rm = TRUE)
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
# Remove outliers
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# Plot histogram of raw cleaned data
p1 <- hist(LBXBPB_clean,
main = "Histogram of LBXBPB (Outliers Removed)",
xlab = "LBXBPB",
col = "skyblue", border = "white")
# Apply log normalization (log-transform)
LBXBPB_log <- log(LBXBPB_clean)
# Plot histogram of log-transformed data
p2 <- hist(LBXBPB_log,
main = "Histogram of log(LBXBPB) (Outliers Removed)",
xlab = "log(LBXBPB)",
col = "tomato", border = "white")
p1|p2
# Compute IQR bounds
Q1 <- quantile(nhanes_clean$LBXBCD, 0.25, na.rm = TRUE)
Q3 <- quantile(nhanes_clean$LBXBCD, 0.75, na.rm = TRUE)
IQR_val <- IQR(nhanes_clean$LBXBCD, na.rm = TRUE)
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
# Remove outliers
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# --- Log transform ---
# (use log1p if your data contains zeros)
LBXBPB_log <- log(LBXBPB_clean)
# --- Create plots ---
p1 <- ggplot(data.frame(LBXBPB_clean), aes(x = LBXBPB_clean)) +
geom_histogram(binwidth = diff(range(LBXBPB_clean))/30,
fill = "skyblue", color = "white") +
labs(title = "LBXBPB (Outliers Removed)", x = "LBXBPB", y = "Count") +
theme_minimal()
p2 <- ggplot(data.frame(LBXBPB_log), aes(x = LBXBPB_log)) +
geom_histogram(binwidth = diff(range(LBXBPB_log))/30,
fill = "tomato", color = "white") +
labs(title = "log(LBXBPB) (Outliers Removed)", x = "log(LBXBPB)", y = "Count") +
theme_minimal()
# --- Combine side by side ---
p1 + p2
# Compute IQR bounds
Q1 <- quantile(nhanes_clean$LBXBCD, 0.25, na.rm = TRUE)
Q3 <- quantile(nhanes_clean$LBXBCD, 0.75, na.rm = TRUE)
IQR_val <- IQR(nhanes_clean$LBXBCD, na.rm = TRUE)
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
# Remove outliers
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# --- Log transform ---
# (use log1p if your data contains zeros)
LBXBPB_log <- log(LBXBPB_clean)
# --- Create plots ---
p1 <- ggplot(data.frame(LBXBPB_clean), aes(x = LBXBPB_clean)) +
geom_histogram(binwidth = diff(range(LBXBPB_clean))/30,
fill = "skyblue", color = "white") +
labs(title = "LBXBPB (Outliers Removed)", x = "LBXBPB", y = "Count") +
theme_minimal()
p2 <- ggplot(data.frame(LBXBPB_log), aes(x = LBXBPB_log)) +
geom_histogram(binwidth = diff(range(LBXBPB_log))/30,
fill = "tomato", color = "white") +
labs(title = "log(LBXBPB) (Outliers Removed)", x = "log(LBXBPB)", y = "Count") +
theme_minimal()
# --- Combine side by side ---
p1 | p2
library(ggplot2)
library(patchwork)  # install.packages("patchwork") if needed
# --- Remove outliers ---
Q1 <- quantile(nhanes_clean$LBXBPB, 0.25, na.rm = TRUE)
Q3 <- quantile(nhanes_clean$LBXBPB, 0.75, na.rm = TRUE)
IQR_val <- IQR(nhanes_clean$LBXBPB, na.rm = TRUE)
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# --- Log transform ---
# (use log1p if your data contains zeros)
LBXBPB_log <- log(LBXBPB_clean)
# --- Create plots ---
p1 <- ggplot(data.frame(LBXBPB_clean), aes(x = LBXBPB_clean)) +
geom_histogram(binwidth = diff(range(LBXBPB_clean))/30,
fill = "skyblue", color = "white") +
labs(title = "LBXBPB (Outliers Removed)", x = "LBXBPB", y = "Count") +
theme_minimal()
p2 <- ggplot(data.frame(LBXBPB_log), aes(x = LBXBPB_log)) +
geom_histogram(binwidth = diff(range(LBXBPB_log))/30,
fill = "tomato", color = "white") +
labs(title = "log(LBXBPB) (Outliers Removed)", x = "log(LBXBPB)", y = "Count") +
theme_minimal()
# --- Combine side by side ---
p1 + p2
library(ggplot2)
library(patchwork)  # install.packages("patchwork") if needed
# --- Remove outliers ---
Q1 <- quantile(nhanes_clean$LBXBCD, 0.25, na.rm = TRUE)
Q3 <- quantile(nhanes_clean$LBXBCD, 0.75, na.rm = TRUE)
IQR_val <- IQR(nhanes_clean$LBXBCD, na.rm = TRUE)
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# --- Log transform ---
# (use log1p if your data contains zeros)
LBXBPB_log <- log(LBXBPB_clean)
# --- Create plots ---
p1 <- ggplot(data.frame(LBXBPB_clean), aes(x = LBXBPB_clean)) +
geom_histogram(binwidth = diff(range(LBXBPB_clean))/30,
fill = "skyblue", color = "white") +
labs(title = "LBXBPB (Outliers Removed)", x = "LBXBPB", y = "Count") +
theme_minimal()
p2 <- ggplot(data.frame(LBXBPB_log), aes(x = LBXBPB_log)) +
geom_histogram(binwidth = diff(range(LBXBPB_log))/30,
fill = "tomato", color = "white") +
labs(title = "log(LBXBPB) (Outliers Removed)", x = "log(LBXBPB)", y = "Count") +
theme_minimal()
# --- Combine side by side ---
p1 + p2
library(ggplot2)
library(patchwork)  # install.packages("patchwork") if needed
# --- Remove outliers ---
Q1 <- quantile(nhanes_clean$LBXBMN, 0.25, na.rm = TRUE)
Q3 <- quantile(nhanes_clean$LBXBMN, 0.75, na.rm = TRUE)
IQR_val <- IQR(nhanes_clean$LBXBMN, na.rm = TRUE)
lower_bound <- Q1 - 1.5 * IQR_val
upper_bound <- Q3 + 1.5 * IQR_val
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# --- Log transform ---
# (use log1p if your data contains zeros)
LBXBPB_log <- log(LBXBPB_clean)
# --- Create plots ---
p1 <- ggplot(data.frame(LBXBPB_clean), aes(x = LBXBPB_clean)) +
geom_histogram(binwidth = diff(range(LBXBPB_clean))/30,
fill = "skyblue", color = "white") +
labs(title = "LBXBPB (Outliers Removed)", x = "LBXBPB", y = "Count") +
theme_minimal()
p2 <- ggplot(data.frame(LBXBPB_log), aes(x = LBXBPB_log)) +
geom_histogram(binwidth = diff(range(LBXBPB_log))/30,
fill = "tomato", color = "white") +
labs(title = "log(LBXBPB) (Outliers Removed)", x = "log(LBXBPB)", y = "Count") +
theme_minimal()
# --- Combine side by side ---
p1 + p2
library(ggplot2)
library(patchwork)  # install.packages("patchwork") if needed
# --- Remove outliers ---
# --- Compute mean and SD ---
mean_val <- mean(nhanes_clean$LBXBCD, na.rm = TRUE)
sd_val   <- sd(nhanes_clean$LBXBCD, na.rm = TRUE)
lower_bound <- mean_val - 2.5 * sd_val
upper_bound <- mean_val + 2.5 * sd_val
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# --- Log transform ---
# (use log1p if your data contains zeros)
LBXBPB_log <- log(LBXBPB_clean)
# --- Create plots ---
p1 <- ggplot(data.frame(LBXBPB_clean), aes(x = LBXBPB_clean)) +
geom_histogram(binwidth = diff(range(LBXBPB_clean))/30,
fill = "skyblue", color = "white") +
labs(title = "LBXBPB (Outliers Removed)", x = "LBXBPB", y = "Count") +
theme_minimal()
p2 <- ggplot(data.frame(LBXBPB_log), aes(x = LBXBPB_log)) +
geom_histogram(binwidth = diff(range(LBXBPB_log))/30,
fill = "tomato", color = "white") +
labs(title = "log(LBXBPB) (Outliers Removed)", x = "log(LBXBPB)", y = "Count") +
theme_minimal()
# --- Combine side by side ---
p1 + p2
library(ggplot2)
library(patchwork)  # install.packages("patchwork") if needed
# --- Remove outliers ---
# --- Compute mean and SD ---
mean_val <- mean(nhanes_clean$LBXBMN, na.rm = TRUE)
sd_val   <- sd(nhanes_clean$LBXBMN, na.rm = TRUE)
lower_bound <- mean_val - 2.5 * sd_val
upper_bound <- mean_val + 2.5 * sd_val
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# --- Log transform ---
# (use log1p if your data contains zeros)
LBXBPB_log <- log(LBXBPB_clean)
# --- Create plots ---
p1 <- ggplot(data.frame(LBXBPB_clean), aes(x = LBXBPB_clean)) +
geom_histogram(binwidth = diff(range(LBXBPB_clean))/30,
fill = "skyblue", color = "white") +
labs(title = "LBXBPB (Outliers Removed)", x = "LBXBPB", y = "Count") +
theme_minimal()
p2 <- ggplot(data.frame(LBXBPB_log), aes(x = LBXBPB_log)) +
geom_histogram(binwidth = diff(range(LBXBPB_log))/30,
fill = "tomato", color = "white") +
labs(title = "log(LBXBPB) (Outliers Removed)", x = "log(LBXBPB)", y = "Count") +
theme_minimal()
# --- Combine side by side ---
p1 + p2
View(nhanes_subset)
library(ggplot2)
library(patchwork)  # install.packages("patchwork") if needed
# Standard scale LBXBPB
mutate(
LBXBMN_scaled = as.numeric(scale(nhanes_clean$LBXBMN))
)
library(ggplot2)
library(patchwork)  # install.packages("patchwork") if needed
# Standard scale LBXBPB
LBXBMN_scaled <- as.numeric(scale(nhanes_clean$LBXBMN))
# --- Remove outliers ---
# --- Compute mean and SD ---
mean_val <- mean(LBXBMN_scaled, na.rm = TRUE)
sd_val   <- sd(LBXBMN_scaled, na.rm = TRUE)
lower_bound <- mean_val - 2.5 * sd_val
upper_bound <- mean_val + 2.5 * sd_val
LBXBPB_clean <- nhanes_clean$LBXBPB[
nhanes_clean$LBXBPB >= lower_bound & nhanes_clean$LBXBPB <= upper_bound
]
# --- Log transform ---
# (use log1p if your data contains zeros)
LBXBPB_log <- log(LBXBPB_clean)
# --- Create plots ---
p1 <- ggplot(data.frame(LBXBPB_clean), aes(x = LBXBPB_clean)) +
geom_histogram(binwidth = diff(range(LBXBPB_clean))/30,
fill = "skyblue", color = "white") +
labs(title = "LBXBPB (Outliers Removed)", x = "LBXBPB", y = "Count") +
theme_minimal()
p2 <- ggplot(data.frame(LBXBPB_log), aes(x = LBXBPB_log)) +
geom_histogram(binwidth = diff(range(LBXBPB_log))/30,
fill = "tomato", color = "white") +
labs(title = "log(LBXBPB) (Outliers Removed)", x = "log(LBXBPB)", y = "Count") +
theme_minimal()
# --- Combine side by side ---
p1 + p2
